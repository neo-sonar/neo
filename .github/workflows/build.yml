name: Build

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CMAKE_GENERATOR: Ninja
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  MACOSX_DEPLOYMENT_TARGET: "10.15"

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux-Clang
            os: ubuntu-20.04
            build_type: Release
            clang_version: 15
            cmake_flags: "-D NEO_ENABLE_INTEL_IPP=ON"
            cmake_targets: all

          - name: Linux-GCC
            os: ubuntu-22.04
            build_type: Debug
            clang_version: ""
            cmake_flags: '-D CMAKE_CXX_FLAGS="-g -fno-omit-frame-pointer -fsanitize=address,undefined -fno-sanitize-recover=all -march=ivybridge"'
            cmake_targets: neo_dsp_tests

          - name: macOS
            os: macos-13
            build_type: Release
            clang_version: ""
            cmake_flags: '-D CMAKE_OSX_ARCHITECTURES="arm64;x86_64"'
            cmake_targets: all

          - name: Windows-MSVC
            os: windows-latest
            build_type: Release
            clang_version: ""
            cmake_flags: '-D CMAKE_CXX_FLAGS="/arch:AVX2" -D NEO_ENABLE_INTEL_IPP=ON'
            cmake_targets: neo_dsp_tests

          - name: Windows-Clang
            os: windows-latest
            build_type: Release
            clang_version: latest
            cmake_flags: '-D CMAKE_CXX_FLAGS="-march=native" -D NEO_ENABLE_INTEL_IPP=ON'
            cmake_targets: neo_dsp_tests

          - name: Coverage-Native
            os: ubuntu-22.04
            build_type: Debug
            clang_version: ""
            cmake_flags: '-D CMAKE_CXX_FLAGS="--coverage -march=native" -D NEO_ENABLE_INTEL_IPP=ON'
            cmake_targets: neo_dsp_tests

          - name: Coverage-SSE41
            os: ubuntu-22.04
            build_type: Debug
            clang_version: ""
            cmake_flags: '-D CMAKE_CXX_FLAGS="--coverage -march=nehalem" -D NEO_ENABLE_INTEL_IPP=ON'
            cmake_targets: neo_dsp_tests

          - name: Coverage-SSE2
            os: ubuntu-22.04
            build_type: Debug
            clang_version: ""
            cmake_flags: '-D CMAKE_CXX_FLAGS="--coverage -msse2" -D NEO_ENABLE_INTEL_IPP=ON'
            cmake_targets: neo_dsp_tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: >
          sudo apt update &&
          sudo apt install
          libcurl4-openssl-dev
          libasound2-dev
          libx11-dev
          libxinerama-dev
          libxext-dev
          libfreetype6-dev
          libwebkit2gtk-4.0-dev
          libglu1-mesa-dev
          xvfb
          ninja-build
          gcovr

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja osxutils

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: choco install ninja ccache

      - name: Install clang
        if: matrix.clang_version != ''
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.clang_version }}

      - name: Cache IPP (Windows)
        if: runner.os == 'Windows'
        id: cache-ipp
        uses: actions/cache@v3
        with:
          key: ipp-${{ matrix.name }}
          path: C:\Program Files (x86)\Intel\oneAPI\ipp

      - name: Install IPP (Windows)
        if: (runner.os == 'Windows') && (steps.cache-ipp.outputs.cache-hit != 'true')
        shell: bash
        run: |
          curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/irc_nas/19078/w_BaseKit_p_2023.0.0.25940_offline.exe
          ./oneapi.exe -s -x -f oneapi
          ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

      - name: Save IPP cache even on job fail
        if: runner.os == 'Windows' && (steps.cache-ipp.outputs.cache-hit != 'true')
        uses: actions/cache/save@v3
        with:
          key: ipp-${{ matrix.name }}
          path: C:\Program Files (x86)\Intel\oneAPI\ipp

      - name: Install IPP (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt update
          sudo -E apt-cache pkgnames intel | sort | grep ipp
          sudo apt install intel-oneapi-ipp-devel

      - name: Install ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: neo-dsp-build-${{ matrix.name }}

      - name: Setup Visual Studio
        if: matrix.name == 'Windows-MSVC'
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Print native arch flags (GCC)
        if: contains(matrix.name, 'Coverage')
        shell: bash
        run: gcc -march=native -E -v - </dev/null 2>&1 | grep cc1

      - name: CMake configure
        shell: bash
        run: cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.cmake_flags }}

      - name: CMake build
        shell: bash
        run: cmake --build build --target ${{ matrix.cmake_targets }}

      - name: CTest
        shell: bash
        run: ctest --test-dir build -C ${{ matrix.build_type }} --output-on-failure

      - name: Coverage report
        if: contains(matrix.name, 'Coverage')
        shell: bash
        run: >
          gcovr
          --xml-pretty
          -e ".*_test\.cpp"
          --exclude-unreachable-branches
          --exclude-throw-branches
          -r src
          -s build
          -o build/coverage.xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        if: contains(matrix.name, 'Coverage')
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/coverage.xml
          fail_ci_if_error: true
